
#user  nobody;
worker_processes 4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections 8196;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    #access_log  /var/log/nginx/access.log;
    access_log off;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #keepalive_timeout  65;
    keepalive_timeout  15;
    keepalive_requests 1000;
    reset_timedout_connection on;

    client_body_timeout 10;
    send_timeout 2;

    #server {
        #listen       80;
        #server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    map $http_upgrade $connection_upgrade {
       default upgrade;
      '' close;
    }

    upstream grafana {
        server 127.0.0.1:3000;
    }

    upstream backend {        
        server localhost:8000;
        keepalive 64;
    }
    
    server {
	    server_name  ekalashnikov.devhands.cloud www.ekalashnikov.devhands.cloud;

	    listen 443 ssl; # managed by Certbot

	    # RSA certificate
	    ssl_certificate /etc/letsencrypt/live/ekalashnikov.devhands.cloud/fullchain.pem; # managed by Certbot
	    ssl_certificate_key /etc/letsencrypt/live/ekalashnikov.devhands.cloud/privkey.pem; # managed by Certbot

	    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

	    # Redirect non-https traffic to https
	    if ($scheme != "https") {
	        return 301 https://$host$request_uri;
	    } # managed by Certbot

	    location /grafana/ {
		proxy_set_header Host $host;
		proxy_pass http://localhost:3000;
                rewrite  ^/grafana/(.*)  /$1 break;
	    }

	    location /grafana/api/live/ {
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_pass http://grafana;
                rewrite  ^/grafana/(.*)  /$1 break;
	    }

         location /prometheus {
                rewrite /prometheus/(.*) /$1  break;
                proxy_pass http://localhost:9090;
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         }


         location /alertmanager {
                rewrite /alertmanager/(.*) /$1  break;
                proxy_pass http://localhost:9093;
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         }

           #location /api/ {
           #     proxy_set_header Host $host;
           #     proxy_pass http://localhost:8000;
           #}
           
           location /api/ {
                rewrite /api/(.*)  /$1 break;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
           }
    }
}


